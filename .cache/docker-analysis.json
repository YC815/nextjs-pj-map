{
  "github:src/app/page.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "此檔案未使用 Docker 相關功能。"
  },
  "app/admin/logs/page.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於管理和監控 AI 系統日誌的前端頁面。它提供了即時監控日誌的功能，包括顯示日誌的統計資訊、過濾日誌的級別和類別、以及控制日誌的串流。使用者可以選擇不同的日誌級別和類別來查看特定的日誌，並且可以啟動或停止日誌的即時串流。頁面還提供了自動滾動功能，方便使用者查看最新的日誌。"
  },
  "app/api/admin/logs/route.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案提供了一個管理員日誌查看的 API，允許用戶通過不同的操作來檢索和管理日誌數據。主要功能包括獲取最近的日誌記錄、讀取指定日期的日誌檔案、日誌串流以及獲取日誌統計資訊。這些功能通過 HTTP GET 請求來實現，並且支持過濾和分類日誌數據。"
  },
  "lib/core/logger.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要負責提供一個日誌系統，允許應用程式記錄不同級別的日誌（DEBUG、INFO、WARN、ERROR），並將日誌輸出到控制台和檔案中。它還提供了過濾功能，可以根據特定的 API 路徑過濾掉不需要的日誌。這個日誌系統支援單例模式，確保全域只有一個日誌實例，並且支援工具特定的日誌記錄功能。"
  },
  "app/api/agent/route.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是 Next.js 應用程式中的一個 API 路由，主要負責處理與 AI Agent 相關的操作。它提供了兩個主要的 HTTP 方法：POST 和 GET。POST 方法用於接收訊息並通過 Agent 執行，返回執行結果。GET 方法則提供了多種操作，包括查詢系統狀態、執行系統測試和重置系統。檔案中使用了 AgentFactory 來管理和執行 AI Agent 的操作，並且包含了日誌記錄功能以追蹤請求和錯誤。"
  },
  "lib/ai/index.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "strict-docker-tools"
    ],
    "summary": "這個檔案主要負責統一導出 AI 模組的功能，並提供遷移建議和警告。檔案中包含了許多已棄用的工具，這些工具已經被遷移到新的統一 Function Call 系統中。開發者應參考遷移指南來更新使用的工具。檔案還提供了一個遷移映射表，幫助快速查找新工具名稱。"
  },
  "lib/logger.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於重新導出核心 logger 模組的功能，確保向後兼容性。它從核心 logger 模組中導出 Logger、LogLevel、ToolLogger 和 createToolLogger，並創建了一個默認的 logger 實例。這樣的設計允許其他模組或應用程式方便地使用統一的日誌記錄功能。"
  },
  "lib/functions/migration-manager.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "oldTool": "DockerTools.readFileFromDocker",
        "newTool": "dockerReadFile"
      },
      {
        "oldTool": "DockerTools.listDirFromDocker",
        "newTool": "dockerListDirectory"
      },
      {
        "oldTool": "DockerTools.writeFileToDocker",
        "newTool": "dockerWriteFile"
      },
      {
        "oldTool": "DockerTools.findFiles",
        "newTool": "dockerFindFiles"
      },
      {
        "oldTool": "DockerTools.checkPathExists",
        "newTool": "dockerCheckPathExists"
      },
      {
        "oldTool": "DockerTools.getFileInfo",
        "newTool": "dockerGetProjectInfo"
      },
      {
        "oldTool": "UnifiedDockerTools.readFile",
        "newTool": "dockerReadFile"
      },
      {
        "oldTool": "UnifiedDockerTools.listDirectory",
        "newTool": "dockerListDirectory"
      },
      {
        "oldTool": "UnifiedDockerTools.writeFile",
        "newTool": "dockerWriteFile"
      },
      {
        "oldTool": "UnifiedDockerTools.findFiles",
        "newTool": "dockerFindFiles"
      },
      {
        "oldTool": "UnifiedDockerTools.checkPathExists",
        "newTool": "dockerCheckPathExists"
      },
      {
        "oldTool": "UnifiedDockerTools.getProjectInfo",
        "newTool": "dockerGetProjectInfo"
      },
      {
        "oldTool": "DockerSecurityValidator.validate",
        "newTool": "securityValidator"
      },
      {
        "oldTool": "DockerSecurityValidator.scan",
        "newTool": "securityValidator"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案主要負責管理舊的 AI 工具到新的 Function Call 系統的遷移過程。它提供了一個遷移映射，將舊工具名稱映射到新工具名稱，並追蹤遷移狀態。檔案中包含了遷移管理器類別，該類別負責初始化遷移日誌、檢查工具是否已棄用、生成遷移報告和向後相容性包裝器。此外，還提供了一個遷移指南生成函數，幫助開發者進行工具遷移。"
  },
  "lib/ai/agent-controller.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "ToolRegistry"
    ],
    "summary": "這個檔案定義了一個 AI 工具控制框架，名為 AgentController，旨在讓 AI 能夠在使用工具後根據結果進行決策。該框架允許 AI 進行多次工具呼叫，並根據工具的執行結果來決定下一步行動。此模組已被棄用，建議使用新的 aiAgentExecute 工具。檔案中包含了對工具呼叫的結構定義、工具執行結果的處理邏輯，以及與 OpenAI API 的整合，用於進行推論和決策。此框架還提供了日誌記錄功能，以便追蹤和分析 AI 的決策過程。"
  },
  "lib/ai/agent-factory.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "DockerAIEditorManager",
        "description": "用於管理 Docker 容器的編輯器管理器，負責配置和管理 Docker 容器的上下文。"
      }
    ],
    "dockerTools": [
      "StrictDockerTools",
      "DockerAIEditorManager"
    ],
    "summary": "這個檔案定義了一個名為 AgentFactory 的工廠類別，用於簡化和管理 Agent 控制器的建立和使用。它提供了多種方法來創建和測試安全的 Agent 控制器，並整合了 Docker 和 OpenAI 服務。主要功能包括建立嚴格的 Docker 工具和工具註冊器、創建 OpenAI 服務、快速執行 Agent 任務以及測試和獲取系統狀態。"
  },
  "lib/ai/ai-output-logger.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "AI 輸出記錄器是一個用於記錄 AI 系統輸出和決策過程的工具。它支援將 AI 的文字輸出、決策、錯誤和系統訊息記錄到檔案中，並提供時間戳記錄和檔案輪轉功能。此工具允許開發者設定記錄檔案的目錄、檔名、最大檔案大小等配置，並支援控制台輸出。它還提供了獲取最近記錄、清理舊記錄檔案和獲取記錄統計的功能。"
  },
  "lib/ai/chat-agent-integration.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "DockerAIEditorManager",
        "description": "管理 Docker AI 編輯器的操作"
      },
      {
        "name": "createDockerToolkit",
        "description": "建立 Docker 工具包以支援容器操作"
      },
      {
        "name": "dockerConfigManager.autoDetectDockerContext",
        "description": "自動檢測 Docker 配置"
      }
    ],
    "dockerTools": [
      "DockerAIEditorManager",
      "DockerToolkit"
    ],
    "summary": "這個檔案是聊天 AI 與 Agent 控制框架的整合模組，主要負責將新的 Agent 控制器整合到現有的聊天 AI 系統中。它提供了初始化和處理聊天訊息的功能，並且支援 Docker 的動態配置檢測和工具註冊。此模組使用 Docker 來管理和操作 AI 編輯器，並整合 OpenAI 服務以增強聊天功能。"
  },
  "lib/ai/context-manager.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "createDockerToolkit",
        "description": "用於創建 Docker 工具包，提供容器健康檢查、檔案系統操作等功能。"
      },
      {
        "name": "createDefaultDockerContext",
        "description": "用於創建預設的 Docker 上下文，包含容器 ID 和專案名稱。"
      }
    ],
    "dockerTools": [
      "DockerToolkit"
    ],
    "summary": "這個檔案定義了一個 AI 上下文管理器，主要用於管理和分析專案的狀態。它提供了獲取專案快照的功能，並能夠檢查 Docker 容器的健康狀態、分析專案的檔案結構和依賴關係，以及檢查開發伺服器的狀態。這個模組已被棄用，建議使用新的 aiContextManager 工具。"
  },
  "lib/ai/docker-security-validator.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個 Docker 安全驗證器，主要功能是確保所有 AI 工具操作都嚴格限制在 Docker 容器內，防止意外操作宿主機檔案。該模組提供了多種方法來驗證 Docker 上下文、檔案路徑和目錄路徑的安全性，並確保這些操作僅限於指定的專案工作區內。此模組已被棄用，建議使用新的 securityValidator 工具。"
  },
  "lib/ai/enhanced-tool-registry.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "DockerAIEditorManager",
      "DockerTools"
    ],
    "summary": "這個檔案定義了一個增強的工具註冊器類別 `EnhancedToolRegistry`，其主要功能是整合 Docker 工具和 Agent 控制器。該類別負責管理和執行各種工具，特別是與 Docker 相關的工具，如讀取文件、列出目錄、檢查路徑存在性等。它支持自定義工具的添加和執行，並提供工具的 Schema 驗證和統計功能。此外，該類別還包含測試所有工具連接性的功能，確保工具的正常運行。"
  },
  "lib/ai/langchain-chat-engine.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "docker_read_file",
        "description": "讀取 Docker 容器中的文件內容"
      },
      {
        "name": "docker_write_file",
        "description": "在 Docker 容器中創建或寫入文件"
      },
      {
        "name": "docker_ls",
        "description": "列出 Docker 容器中的目錄內容"
      },
      {
        "name": "docker_tree",
        "description": "顯示 Docker 容器中的目錄結構"
      }
    ],
    "dockerTools": [
      "createDefaultDockerContext",
      "getDockerContextByName",
      "getDockerContextById",
      "createDockerContextFromUrl"
    ],
    "summary": "這個檔案主要負責建立一個 AI 助手，專門協助用戶處理在 Docker 容器中運行的 Web 開發專案。它使用 LangChain 框架來整合 OpenAI 的功能，並提供一套工具來與用戶的 Docker 環境互動。AI 助手遵循一系列嚴格的行為規則，以確保高效和準確地完成用戶的請求。檔案中定義了多個工具和上下文管理功能，這些功能允許 AI 助手在 Docker 容器中執行文件操作和其他相關任務。"
  },
  "lib/ai/openai.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "docker_start_dev_server",
        "description": "在容器內啟動開發伺服器"
      },
      {
        "name": "docker_restart_dev_server",
        "description": "在容器內重啟開發伺服器"
      },
      {
        "name": "docker_kill_dev_server",
        "description": "終止容器內開發伺服器"
      },
      {
        "name": "docker_check_dev_server_status",
        "description": "檢查容器內伺服器狀態"
      },
      {
        "name": "docker_read_log_tail",
        "description": "讀取容器內日誌"
      },
      {
        "name": "docker_search_error_logs",
        "description": "搜尋容器內錯誤日誌"
      },
      {
        "name": "docker_get_log_files",
        "description": "獲取容器內日誌檔案清單"
      },
      {
        "name": "docker_check_health",
        "description": "檢查容器內服務健康狀態"
      },
      {
        "name": "docker_check_container_health",
        "description": "檢查Docker容器本身健康狀態"
      },
      {
        "name": "docker_read_file",
        "description": "讀取容器內檔案"
      },
      {
        "name": "docker_write_file",
        "description": "寫入容器內檔案"
      },
      {
        "name": "docker_list_directory",
        "description": "列出容器內目錄內容"
      },
      {
        "name": "docker_smart_monitor_and_recover",
        "description": "智能監控與自動修復"
      },
      {
        "name": "docker_get_full_status_report",
        "description": "獲取完整狀態報告"
      },
      {
        "name": "ask_user",
        "description": "與用戶確認操作"
      }
    ],
    "dockerTools": [
      "Docker AI Editor Manager"
    ],
    "summary": "這個檔案是 OpenAI Function Calling 的整合模組，主要用於實現 AI 編輯器與 OpenAI GPT-4o 的功能調用整合。它提供了一個管理器類別 OpenAIIntegration，負責處理與 OpenAI 的互動，並通過 Docker AI 編輯器管理器來執行各種 Docker 工具功能。這些功能包括容器內的開發伺服器管理、日誌監控、健康檢查、檔案系統操作以及智能監控和用戶互動等。此模組已被棄用，建議使用新的 aiChatSession 工具。"
  },
  "lib/ai/openai-service.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 OpenAI 服務類別，主要用於與 OpenAI API 進行互動。它提供了多種功能，包括建立聊天完成請求、設定和獲取預設模型、驗證 API Key 的有效性，以及獲取可用的模型列表。這些功能主要用於支援 Agent 控制框架，透過 OpenAI 的 API 來實現自然語言處理的能力。檔案中還包含了錯誤處理機制，確保在 API 請求失敗時能夠提供有意義的錯誤訊息。"
  },
  "lib/ai/prompt-builder.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個動態提示建構器，用於生成不同類型的 AI 助理提示，包括完整提示、簡化提示和自動修復提示。它提供了一個工廠函數來創建 DynamicPromptBuilder 的實例，並包含一個顯示遷移警告的函數，提醒開發者該功能已被棄用，應使用新的統一 Function Call 系統。"
  },
  "lib/ai/prompts.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要用於定義一個 AI 提示詞系統，指導 AI 如何智能選擇和使用工具來協助開發者管理和開發 Next.js 專案。它提供了多種系統提示詞和工具選擇指南，幫助 AI 在不同場景下做出適當的決策。檔案中包含了專案探索、檔案操作、開發任務、專案管理等多種模式的指導，以及錯誤處理策略和回應格式指南。"
  },
  "lib/ai/secure-chat-agent-integration.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "DockerAIEditorManager",
        "description": "用於管理 AI 編輯器的 Docker 工具"
      }
    ],
    "dockerTools": [
      "DockerAIEditorManager"
    ],
    "summary": "這個檔案是安全聊天 AI 與 Agent 控制框架的整合模組，專注於使用嚴格的 Docker 工具來確保所有操作都限制在容器內的專案目錄中。它替換了不安全的舊版 ChatAgentIntegrator，並提供了一個安全的聊天訊息處理流程。此模組已被棄用，建議使用新的 aiChatSession 工具。"
  },
  "lib/ai/strict-agent-factory.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "DockerAIEditorManager"
    ],
    "summary": "這個檔案定義了一個名為 StrictAgentFactory 的類別，其主要功能是建立和管理一個嚴格模式的 Agent 控制器。這個控制器僅限於在 Docker 容器內的特定目錄中運行，並且使用嚴格限制的工具集。該類別確保無法訪問宿主機檔案系統，並提供了多種方法來建立、運行和測試這些 Agent 控制器。它還整合了 Docker 管理器和 OpenAI 服務，以支持在容器內的 AI 操作。"
  },
  "lib/ai/strict-docker-tools.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "method": "executeDockerAITool",
        "description": "用於執行 Docker 相關的工具操作，如讀取、寫入檔案和列出目錄內容"
      }
    ],
    "dockerTools": [
      "DockerAIEditorManager"
    ],
    "summary": "這個檔案提供了一個名為 StrictDockerTools 的類別，用於在 Docker 容器內進行安全的檔案操作。它替代了已刪除的 docker-tools-v2.ts，並限制操作在指定的專案目錄內，以確保安全性。主要功能包括讀取、寫入檔案，列出目錄內容，尋找檔案，以及獲取專案資訊。這些操作都是通過 DockerAIEditorManager 的 executeDockerAITool 方法來實現的，確保在 Docker 容器內的操作是安全且受控的。"
  },
  "lib/ai/strict-tool-registry.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "StrictDockerTools",
      "DockerAIEditorManager"
    ],
    "summary": "這個檔案定義了一個名為 StrictToolRegistry 的類別，用於管理和執行嚴格限制在 Docker 容器內的工具。其主要目的是確保工具只能在指定的 Docker 容器內運行，並且只能訪問容器內的特定工作目錄，從而增強安全性。這個類別提供了工具的註冊、執行、驗證和測試功能，並拒絕任何自定義工具的添加，以防止未經授權的操作。"
  },
  "lib/ai/tools/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要負責統一導出 AI 工具相關的模組，提供架構化的工具管理和導出功能。雖然曾經包含 Docker 工具的導出，但這部分已經被移除，並建議使用新的位置 src/lib/functions/docker 來進行 Docker 相關操作。"
  },
  "lib/functions/categories.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要用於定義和管理 OpenAI Function Call 工具的分類。它提供了多個介面來描述功能的元數據、OpenAI 函數的結構，以及工具分類的元數據。檔案中還包含了一些輔助函數，用於獲取分類的元數據、按優先級排序的分類列表，以及獲取分類的圖示和顏色。這些功能有助於在系統中組織和管理不同類型的工具，特別是與 Docker、檔案系統、網路、AI、專案管理、系統和實用工具相關的功能。"
  },
  "lib/functions/types.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要定義了一套統一的函數調用系統的類型結構，包含函數參數、工具分類、存取權限、OpenAI Schema、函數定義、函數範例、函數執行結果、函數分類、函數統計、工具註冊表介面、執行上下文、執行結果、遷移相關類型、驗證結果、工具執行選項以及批量執行結果等多種介面和枚舉。這些定義為開發者提供了一個結構化的方式來描述和管理函數的屬性、執行和分類，並支持工具的註冊和管理。"
  },
  "lib/docker/tool-registry.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "docker_start_dev_server",
      "docker_restart_dev_server",
      "docker_kill_dev_server",
      "docker_check_dev_server_status",
      "docker_read_log_tail",
      "docker_search_error_logs",
      "docker_get_log_files",
      "docker_check_health",
      "docker_check_container_health",
      "docker_read_file"
    ],
    "summary": "此檔案定義了一個 Docker AI 工具註冊表，列出所有可供 AI Agent 在 Docker 容器內使用的工具清單與規格。這些工具涵蓋了開發伺服器管理、日誌監控、健康檢查、檔案系統操作等功能，並為每個工具提供了詳細的使用說明、輸入輸出結構、範例代碼及風險提示。這些工具旨在協助自動化管理和監控 Docker 容器內的應用程式運行狀態。"
  },
  "lib/docker/ai-editor-manager.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "createDockerToolkit",
      "DockerToolkit",
      "DockerContext"
    ],
    "summary": "這個檔案是 Docker AI 編輯器管理器的核心控制器，負責統一管理所有 Docker AI 工具和功能。它協調 Docker 工具和容器操作，並提供了一個安全的工具調用包裝器，包含斷路器機制以防止重複調用。該模組還支持用戶確認請求和操作日誌記錄，確保 Docker 上下文的有效性，並在無效時使用模擬模式執行工具。"
  },
  "lib/docker/docker-context-config.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "docker ps",
        "description": "列出所有容器，並格式化輸出以獲取容器 ID、名稱和狀態。",
        "usage": "用於檢測和更新容器狀態。"
      },
      {
        "name": "docker inspect",
        "description": "檢查特定容器的詳細資訊。",
        "usage": "用於根據容器 ID 獲取詳細的容器上下文。"
      }
    ],
    "dockerTools": [
      "Docker CLI"
    ],
    "summary": "這個檔案主要負責管理和檢測 Docker 容器的上下文配置。它提供了多種方法來根據專案 ID、容器 ID 或專案名稱動態獲取 Docker 容器的相關資訊，並且能夠更新和緩存容器的狀態。這些功能對於需要動態管理和監控 Docker 容器的應用程式非常有用。"
  },
  "lib/docker/function-schemas.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "docker_start_dev_server",
      "docker_restart_dev_server",
      "docker_kill_dev_server",
      "docker_check_dev_server_status",
      "docker_read_log_tail",
      "docker_search_error_logs",
      "docker_get_log_files",
      "docker_check_health",
      "docker_check_container_health",
      "docker_read_file",
      "docker_write_file",
      "docker_list_directory",
      "docker_smart_monitor_and_recover",
      "docker_get_full_status_report",
      "docker_ls",
      "docker_tree",
      "docker_pwd"
    ],
    "summary": "這個檔案定義了一組 Docker 工具的功能結構，主要用於 AI 系統與 Docker 容器的互動。這些功能包括啟動、重啟和終止開發伺服器，檢查伺服器和容器的狀態，讀取和寫入容器內的檔案，監控和修復容器健康狀態，以及與使用者互動等。這些功能的定義以 TypeScript 的 interface 和 type 形式呈現，提供了詳細的參數結構和描述，便於開發者在 AI 系統中調用這些 Docker 工具。"
  },
  "lib/docker/tools.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案提供了一個工具類，用於管理和操作在 Docker 容器內部運行的開發伺服器。主要功能包括啟動、重啟、終止和檢查開發伺服器的狀態。該工具確保所有操作都在 Docker 容器內部執行，避免對宿主機造成影響。它還提供了從容器日誌中檢測伺服器 URL 的功能，並能夠通過檢查常見端口來確定伺服器的可訪問 URL。"
  },
  "lib/docker/config-manager.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "docker",
      "docker ps",
      "docker inspect",
      "docker exec"
    ],
    "summary": "這個檔案主要負責管理 Docker 配置，提供自動檢測和配置 Docker 容器的功能。它通過檢查 Docker 的可用性、列出運行中的容器、選擇最適合的容器並驗證其可用性來自動設置 Docker 上下文。此外，還提供手動設置 Docker 上下文和清除快取的功能。這對於需要動態管理和配置 Docker 容器的應用程式非常有用。"
  },
  "lib/constants.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一些應用程式中使用的常數，包括 AI 助手的名稱和預設的 AI 模型及溫度設定。這些常數可以在應用程式的其他部分被引用，以保持一致性和易於維護。"
  },
  "lib/functions/index.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "dockerFunctions"
    ],
    "summary": "這個檔案是統一 Function Call 系統的主索引文件，負責匯入和匯出各種工具和功能模組。它整合了多種工具，包括 Docker、檔案系統、網路、AI 等，並提供工具的分類、優先級排序、搜尋、統計和執行功能。此檔案的主要用途是作為工具管理的核心，提供統一的介面來管理和使用不同類型的工具。"
  },
  "lib/functions/ai/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要負責整合和管理 AI 相關的功能，包括 AI 代理執行、AI 聊天會話管理以及 AI 工具註冊表管理。它提供了多種功能來處理 AI 代理任務、管理聊天會話和註冊或執行 AI 工具。每個功能都有詳細的參數驗證和處理邏輯，確保操作的有效性和安全性。"
  },
  "lib/functions/docker/index.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "getDockerContextById",
        "description": "根據容器 ID 獲取 Docker 上下文"
      },
      {
        "name": "getDockerContextByName",
        "description": "根據專案名稱獲取 Docker 上下文"
      },
      {
        "name": "createDefaultDockerContext",
        "description": "創建預設的 Docker 上下文"
      }
    ],
    "dockerTools": [
      "DockerToolkit",
      "DockerContext"
    ],
    "summary": "這個檔案主要負責管理和操作 Docker 容器內的開發伺服器。它提供了一些工具函數來啟動、重啟和檢查 Docker 容器內的開發伺服器狀態。這些操作都是在 Docker 容器內執行的，與宿主機完全隔離。檔案中實現了一個安全工具調用包裝器，提供防爆閥機制以限制工具的頻繁調用，並使用緩存來提高效率。此外，檔案還包含了獲取 Docker 工具包的邏輯，確保 Docker 上下文的完整性和有效性。"
  },
  "lib/functions/executor.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要提供了一個工具執行器的實現，負責統一執行各種工具功能，並處理相關的錯誤和結果格式化。它包含了單個工具的執行、批量執行、參數驗證、權限檢查、速率限制檢查等功能。此外，還提供了執行結果的格式化和執行統計的記錄、獲取及清空功能。這些功能有助於在應用程式中統一管理和執行各種工具，並提供詳細的執行統計數據。"
  },
  "lib/functions/filesystem/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一組與檔案系統相關的 OpenAI Function Call，主要功能包括在檔案系統中搜尋檔案或目錄、在檔案內容中搜尋特定文字，以及獲取檔案系統的統計資訊。這些功能被設計為可供 OpenAI 使用的工具，並且每個功能都有詳細的參數和元數據定義，如訪問級別、版本、作者和速率限制等。這些功能的實現部分目前是簡單的模板，返回固定的成功結果，尚未實現實際的檔案系統操作邏輯。"
  },
  "lib/functions/network/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要定義了一些與網路相關的功能，這些功能包括發送 HTTP 請求、執行 DNS 查詢、測試網路連線以及掃描主機的開放埠號。這些功能被設計為 OpenAI Function Call，並提供了相應的參數和處理邏輯。每個功能都有詳細的參數定義和元數據，包括訪問級別、版本、作者、標籤和速率限制等。這些功能可以用於網路測試和診斷，並且提供了獲取功能架構和名稱列表的輔助函數。"
  },
  "lib/functions/project/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要提供了一組專案管理工具，包括獲取專案資訊、管理工作區配置和分析程式碼結構等功能。這些功能可以幫助開發者更好地管理和分析其專案，提供有關專案配置、依賴、結構以及程式碼品質的詳細資訊。"
  },
  "lib/functions/registry.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個工具註冊表的功能，主要用於管理工具的註冊、查詢和管理。它提供了註冊單個工具和批量註冊工具的功能，還可以查詢特定工具或所有已註冊的工具，檢查工具是否已註冊，取消註冊工具，以及清空整個註冊表。此外，還提供了一個方法來獲取註冊表的統計資訊。"
  },
  "lib/functions/system/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案提供了一組系統監控和調試工具，主要功能包括系統資源監控、日誌管理和調試輔助。系統監控功能允許監控 CPU、記憶體、磁碟等資源的使用情況，並提供定期檢查的選項。日誌管理工具支援查詢、過濾、清理、導出和分析應用程式日誌，並提供即時監控功能。調試輔助工具則提供斷點設置、變數檢查和執行追蹤等功能，幫助開發者進行程式調試。"
  },
  "lib/functions/tool-list.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案負責管理動態工具列表，提供了多種操作工具列表的功能，包括設置、獲取、添加、移除工具，以及根據分類和存取權限篩選工具。它還提供了工具列表的搜尋和統計功能，並能夠清空工具列表。這些功能使得開發者可以靈活地管理和操作工具列表，適合用於需要動態更新和查詢工具的應用場景。"
  },
  "lib/functions/utility/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要定義了一系列實用工具函數，這些函數提供了多種常見的數據處理功能，包括時間戳格式化、JSON 格式化、Base64 編碼/解碼、URL 編碼/解碼以及字串的雜湊計算。這些函數被設計為 OpenAI Function Call 的一部分，並且每個函數都包含詳細的參數定義和處理邏輯，適合用於需要這些功能的應用場景。"
  },
  "lib/functions/utility/diff-tool.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "DockerContext",
      "createDockerToolkit"
    ],
    "summary": "這個檔案是一個用於解析和應用 diff 格式內容的工具，並且包含了嚴格的 Docker 安全控管。它提供了解析 diff 格式內容的功能，並將其應用到檔案內容中。此外，該工具還實現了 Docker 環境的安全性驗證，確保操作在安全的 Docker 容器和目錄中進行。這對於需要在 Docker 環境中進行文件修改的應用程序來說非常重要。"
  },
  "lib/ai/tools/tool-manager.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個 AI 工具管理器，提供工具的統一管理、監控和控制功能。它允許開發者註冊、啟用、停用工具，並提供工具的指標和統計數據。該管理器還能夠批量註冊工具、重置工具指標、清理未使用的工具，並進行健康檢查以確保系統的穩定性和性能。"
  },
  "lib/ai/tools/tool-registry.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個 AI 工具註冊表，用於統一管理所有 AI 工具的註冊、查詢和執行。它提供了註冊和取消註冊工具的功能，並能夠驗證和執行工具。該系統還能夠管理工具的啟用狀態，並追蹤工具的執行指標。這些功能使得開發者可以方便地管理和使用各種 AI 工具，並且能夠根據需要啟用或停用特定工具。"
  },
  "lib/ai/tools/tool-types.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一組用於 AI 工具的統一類型和介面，主要用於描述工具的參數、執行結果、執行上下文、驗證結果和工具的分類等。這些定義有助於標準化工具的開發和使用，並提供了一個工具註冊和管理的機制，允許工具的註冊、取消註冊、查詢、驗證和執行。這些介面和類型使得開發者可以更容易地擴展和管理不同類型的工具，並追蹤工具的使用情況和效能。"
  },
  "app/api/chat-agent/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於管理和處理安全聊天代理（Secure Chat Agent）的 API 路由。它提供了兩個主要的 HTTP 方法：POST 和 GET。POST 方法用於接收和處理來自用戶的聊天訊息，並根據提供的配置參數創建或使用現有的安全聊天代理實例來處理這些訊息。GET 方法則提供了多種操作，包括查詢特定對話的狀態、列出所有活躍的代理實例、清理過期的實例，以及進行系統健康檢查。這個檔案強調了安全性，要求提供有效的 API Token 並使用嚴格的參數驗證。"
  },
  "app/api/chat-enhanced/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "function": "extractProjectFromUrl",
        "description": "從 URL 中提取專案資訊，可能涉及 Docker 容器的識別。"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案主要是增強的聊天 API 路由，整合了 SQLite 儲存和完整的上下文管理功能。它提供了一個 POST 方法來處理聊天訊息，並根據請求中的資訊提取專案上下文。該檔案還管理 Langchain 引擎的實例，記錄工具調用和思考過程到資料庫，並使用上下文管理器來處理這些記錄。"
  },
  "lib/chat/chat-context-manager.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是聊天上下文管理器，主要負責管理聊天室的創建、訊息儲存、上下文維護和歷史記錄。它整合了 SQLite 儲存與現有的聊天 API，提供完整的上下文管理功能。檔案中定義了多個介面和類別，特別是 ChatContextManager 類別，提供了多種方法來處理聊天室的創建、訊息的添加和獲取、上下文的構建和設置等功能。這些功能支持 AI 助手在聊天中提供更智能的回應和上下文管理。"
  },
  "lib/database/chat-storage.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案負責管理聊天記錄的持久化儲存，使用 SQLite 資料庫來儲存聊天室、訊息和上下文的資料。它提供了創建、獲取、更新和刪除聊天室的功能，並確保資料庫的初始化和結構設置。這個檔案主要用於處理與聊天相關的資料操作，確保資料的持久性和一致性。"
  },
  "app/api/chat-with-tools/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "dockerConfigManager.autoDetectDockerContext",
        "description": "自動檢測 Docker 配置"
      }
    ],
    "dockerTools": [
      "docker_start_dev_server",
      "docker_restart_dev_server",
      "docker_read_log_tail",
      "docker_search_error_logs",
      "docker_check_health",
      "docker_read_file",
      "docker_write_file",
      "docker_smart_monitor_and_recover",
      "ask_user"
    ],
    "summary": "這個檔案主要負責整合 OpenAI 的功能呼叫 API，並支援自動修正模式。它結合了 AI 編輯器工具和 OpenAI 的功能呼叫，實現了一種對話驅動的自動修正系統。檔案中定義了自動修正模式的狀態管理和結果結構，並提供了一個全域的 OpenAI 整合實例管理器，支援自動修正的擴展功能。這個管理器可以創建和管理 OpenAI 整合實例，並根據需要創建新的會話，特別是自動修正模式下的會話。檔案中還包含了 Docker 配置的自動檢測和多種 Docker 工具的使用，這些工具用於在容器內執行各種操作，如啟動伺服器、讀取日誌、檢查健康狀態等。"
  },
  "app/api/chat/ai-project-assistant.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "createDockerToolkit",
      "createDefaultDockerContext"
    ],
    "summary": "這個檔案定義了一個 AI 專案助理，旨在整合多種 AI 工具來智能地探索和管理專案。它支援自動修正模式，能夠在對話中自動檢測和修正問題。檔案中包含了多個介面和類別，特別是 AIProjectAssistant 類別，負責處理用戶訊息並產生智能回應，並在必要時進行自動修正。這個助理還整合了 Docker 工具，為專案提供容器化的開發環境。"
  },
  "app/api/chat/langchain-route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要負責處理 Langchain 聊天 API 的請求，提供了一個基於專案的聊天引擎管理系統。它允許創建和管理聊天會話，並將會話狀態持久化存儲。檔案中包含了會話的創建、載入、清理過期會話等功能，並且支持通過容器 ID 來標準化專案名稱。這些功能有助於在多專案環境中有效地管理聊天會話。"
  },
  "app/api/chat/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於處理聊天功能的 API 路由，主要負責接收和處理聊天請求，並返回相應的回應。它支持使用 Langchain 引擎和原有的 AI 助理系統來處理訊息，並提供自動修正模式。檔案中包含了對話實例和引擎的管理邏輯，以及對話狀態的獲取功能。它還包含了一些與 Docker 容器相關的功能，如專案名稱標準化和容器 ID 的使用。"
  },
  "app/api/chat/simple-route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個簡化的聊天 API 路由，使用 Next.js 的伺服器端功能來處理 HTTP POST 和 GET 請求。主要功能包括處理聊天訊息和健康檢查。它使用了一個簡化的 LangChain 引擎來處理聊天訊息，並且從環境變數中獲取 Docker 容器的相關配置。這些配置包括容器 ID、專案名稱和工作目錄，這些資訊用於創建和配置 LangChain 引擎。"
  },
  "lib/ai/simple-langchain-engine.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "checkProjectStructure",
        "description": "檢查專案結構的 Docker API 調用"
      },
      {
        "name": "listDirectory",
        "description": "列出目錄內容的 Docker API 調用"
      },
      {
        "name": "readFile",
        "description": "讀取檔案內容的 Docker API 調用"
      },
      {
        "name": "findFiles",
        "description": "搜尋檔案的 Docker API 調用"
      },
      {
        "name": "writeFile",
        "description": "創建或寫入檔案的 Docker API 調用"
      }
    ],
    "dockerTools": [
      "createSimpleDockerTools"
    ],
    "summary": "這個檔案定義了一個簡化的 LangChain 引擎，專注於穩定性和易用性，並使用簡化的 Docker 工具來管理和操作 Docker 容器。主要功能包括檢測專案路徑、探索專案結構、列出目錄內容、讀取檔案、智能檔案搜尋、創建檔案和初始化專案等。這些功能通過 Docker 工具在容器內部執行，提供了一個高效的開發環境。"
  },
  "lib/docker/simple-docker-tools.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "docker exec"
    ],
    "summary": "這個檔案提供了一個簡化的 Docker 工具管理器，專注於在 Docker 容器內部進行基本的文件和目錄操作。它提供了列出目錄、讀取檔案、尋找檔案、寫入檔案和檢查專案結構等功能。這些操作都是通過在指定的 Docker 容器內執行命令來實現的，並且包含基本的安全檢查以避免執行危險命令。這個工具的設計目的是在保持穩定性和易用性的同時，避免過於複雜的安全檢查。"
  },
  "app/api/chat/unified-route.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個統一聊天 API 路由，主要用於處理聊天請求，整合新的統一 Function Call 系統和 AI Agent。它提供了三個主要的 HTTP 方法：POST 用於處理聊天請求，GET 用於獲取 Agent 的統計資訊，DELETE 用於清理過期的會話。檔案中使用了全域的 Agent 實例管理，並且支援動態創建和配置 AI Agent 來處理不同的聊天請求。"
  },
  "app/api/containers/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "command": "docker ps -a --format table {{.ID}}\\t{{.Names}}\\t{{.Status}}\\t{{.CreatedAt}}\\t{{.Image}}",
        "description": "獲取所有 Docker 容器的列表，並格式化輸出以便於解析。"
      },
      {
        "command": "docker run -d --name <containerName> --label ai.web.ide.project=true --label ai.web.ide.project.name=<projectName> --label ai.web.ide.project.description=<description> -p 0:3000 -v <workspaceDir>:/app/workspace node:18-alpine sh -c 'while true; do sleep 3600; done'",
        "description": "創建並啟動一個新的 Docker 容器，並設置相關標籤和端口映射。"
      },
      {
        "command": "docker exec <containerName> sh -c 'apk update'",
        "description": "在容器內更新 apk 包管理器。"
      },
      {
        "command": "docker exec <containerName> sh -c 'apk add --no-cache curl bash git'",
        "description": "在容器內安裝基礎工具。"
      },
      {
        "command": "docker exec <containerName> sh -c 'apk add --no-cache tree wget nano vim htop'",
        "description": "在容器內安裝常用開發工具。"
      },
      {
        "command": "docker exec -w /app/workspace <containerName> npx create-next-app@latest <projectName> --typescript --tailwind --eslint --app --src-dir --import-alias \"@/*\" --yes",
        "description": "在容器內初始化一個新的 Next.js 專案。"
      }
    ],
    "dockerTools": [
      "Docker CLI"
    ],
    "summary": "這個檔案主要負責管理 AI Web IDE 專案的 Docker 容器。它提供了獲取容器列表和創建新專案容器的功能。通過執行 Docker 命令來管理容器，並且支持實時日誌輸出和超時控制。這些功能對於開發和測試環境的自動化部署和管理非常有用。"
  },
  "app/api/docker-containers/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "command": "docker ps",
        "description": "獲取所有運行中的容器資訊"
      },
      {
        "command": "docker inspect",
        "description": "獲取容器的標籤資訊"
      }
    ],
    "dockerTools": [
      "Docker CLI"
    ],
    "summary": "這個檔案是一個 API 路由，用於獲取所有運行中的 Docker 容器資訊。它使用 Node.js 的 child_process 模組來執行 Docker 命令，並解析輸出以獲取容器的名稱、ID、映像檔、狀態、端口映射、創建時間和標籤等資訊。該 API 會過濾出與 'ai-web-ide' 相關的容器，並返回這些容器的詳細資訊。"
  },
  "app/api/docker-dev-server/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "docker inspect",
        "description": "檢查容器的狀態"
      },
      {
        "name": "docker exec",
        "description": "在容器內執行命令"
      }
    ],
    "dockerTools": [
      "Docker CLI"
    ],
    "summary": "這個檔案主要用於管理和檢查 Docker 容器內的開發服務器狀態。它提供了兩個主要的 HTTP 方法：GET 和 POST。GET 方法用於檢查指定容器的狀態，並在 debug 模式下提供詳細的容器內部資訊。POST 方法則用於啟動、停止或重啟容器內的開發服務器，並支持自動檢測項目目錄以啟動服務器。這個檔案的功能對於需要在 Docker 容器中進行開發環境管理的開發者非常有用。"
  },
  "app/api/docker-status/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "docker inspect",
        "description": "檢查容器的運行狀態",
        "usage": "docker inspect ${containerId} --format=\"{{.State.Status}}\""
      },
      {
        "name": "docker port",
        "description": "獲取容器的端口映射資訊",
        "usage": "docker port ${containerId}"
      }
    ],
    "dockerTools": [
      "Docker CLI"
    ],
    "summary": "這個檔案主要用於檢測 Docker 容器的狀態和服務可用性。它提供了兩個 API 路由：GET 和 POST。GET 路由用於檢查單個容器的狀態和服務連線狀態，並返回容器的運行狀態、端口映射和服務可用性。POST 路由則允許批量檢測多個容器的狀態。該檔案使用 Node.js 的 child_process 模組來執行 Docker 命令，並通過 HTTP 請求檢查服務的可訪問性。"
  },
  "app/api/docker/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "handleExecCommand",
        "description": "在 Docker 容器內執行命令"
      },
      {
        "name": "handleHealthCheck",
        "description": "檢查 Docker 容器的健康狀態"
      },
      {
        "name": "handleStatusCheck",
        "description": "檢查 Docker 容器的狀態"
      },
      {
        "name": "handleGetLogs",
        "description": "獲取 Docker 容器的日誌"
      },
      {
        "name": "handleStartContainer",
        "description": "啟動 Docker 容器"
      },
      {
        "name": "handleStopContainer",
        "description": "停止 Docker 容器"
      },
      {
        "name": "handleRestartContainer",
        "description": "重啟 Docker 容器"
      }
    ],
    "dockerTools": [
      "Docker CLI",
      "Docker AI Editor Manager"
    ],
    "summary": "這個檔案是用於處理 Docker 容器內操作的 API 接口。它提供了多種操作功能，包括執行命令、檢查健康狀態、獲取狀態和日誌、啟動、停止和重啟容器等。該檔案還整合了 Docker AI 工具，允許從容器名稱中提取專案名稱並創建 Docker 上下文，以便進一步操作。這些功能主要通過 POST 和 GET 請求來實現，並使用了 Node.js 的 child_process 模組來執行 Docker 命令。"
  },
  "lib/docker/index.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是 Docker 模組的統一導出點，主要負責將多個與 Docker 相關的模組和功能進行匯出，以便其他部分的程式碼可以輕鬆地使用這些功能。它包括工具、配置管理、AI 編輯器管理、工具註冊和功能架構等模組的匯出。此外，檔案還重新導出了一些常用的函數以確保與其他模組的兼容性。"
  },
  "app/api/health/route.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是 AI Web IDE 的健康檢查 API，主要用於監控容器的健康狀態和系統狀態檢查。它提供了一個健康檢查端點，能夠回報系統健康狀態、基本效能指標、工具連接狀態以及響應時間。該 API 會檢查文件系統、環境變數、Next.js 功能和工具管理器的狀態，並返回相應的健康狀態資訊。"
  },
  "app/api/project/route.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "function": "execInContainer",
        "description": "在指定的 Docker 容器中執行命令，並返回執行結果。"
      }
    ],
    "dockerTools": [
      "docker"
    ],
    "summary": "這個檔案主要負責管理和操作專案的 API 路由，特別是與 Next.js 專案的初始化和文件操作相關的功能。它提供了在 Docker 容器中執行命令的能力，並且可以處理文件的讀寫、創建、刪除和列出操作。這些功能被封裝在 API 路由中，允許通過 HTTP 請求來觸發相應的操作。"
  },
  "app/components/Chat/ChatInterface.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "action": "docker_check_dev_server_status",
        "description": "檢查開發伺服器的運行狀態",
        "endpoint": "/api/docker",
        "method": "POST"
      },
      {
        "action": "docker_start_dev_server",
        "description": "啟動開發伺服器",
        "endpoint": "/api/docker",
        "method": "POST"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案主要負責提供聊天介面的功能，包括顯示聊天訊息、管理聊天視窗以及顯示開發伺服器的狀態。它包含了多個 React 組件，如 ProjectStatusIndicator、DevServerStatusBar 和 ChatWindowSelector。這些組件用於顯示專案狀態、檢查和啟動開發伺服器，以及選擇和管理聊天視窗。特別是 DevServerStatusBar 組件，通過與後端 API 進行交互來檢查和控制 Docker 容器中的開發伺服器狀態。"
  },
  "lib/docker/smart-status-manager.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "api": "/api/docker-status",
        "method": "GET",
        "description": "用於獲取特定容器的狀態"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案實現了一個智能 Docker 狀態管理器，主要用於管理和監控 Docker 容器的狀態。它使用事件驅動模式和智能快取技術來減少頻繁的 API 請求，從而提高效能。該管理器可以統一管理所有容器的狀態，並支援批量檢查和單個檢查。它還能自動檢測狀態變化，並在必要時更新狀態。開發者可以透過訂閱狀態變化事件來監聽容器狀態的變化。"
  },
  "app/components/Chat/ChatMessages.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 React 組件 `ChatMessages`，用於顯示聊天訊息列表。它使用了 React 的 `useState` hook 來管理訊息狀態，並根據訊息的類型（使用者或助手）來動態調整訊息的顯示樣式。組件還包括一個空狀態提示，當沒有訊息時顯示，以及一個正在輸入的指示器，模擬訊息輸入的過程。這個組件主要用於在網頁上呈現即時聊天的介面。"
  },
  "app/components/Chat/MessageInput.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 React 組件 `MessageInput`，用於在用戶介面中提供訊息輸入功能。使用者可以在文本框中輸入訊息，並透過按下 Enter 鍵或點擊發送按鈕來發送訊息。組件支援自動調整文本框高度、顯示字元數提示，以及在發送過程中顯示載入狀態。它還提供了一些快捷指令按鈕，方便用戶快速輸入預設訊息。此組件主要用於即時通訊或聊天應用中，提供用戶友好的訊息輸入體驗。"
  },
  "app/components/Chat/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於統一導出聊天相關組件的模組。它將 'ChatInterface'、'ChatMessages' 和 'MessageInput' 三個組件從各自的模組中導出，方便其他模組或檔案引用這些組件。這種設計方式有助於組織代碼結構，使得聊天功能的相關組件可以集中管理和使用。"
  },
  "app/components/DockerStatusWrapper.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要負責包裝 DockerStatusMonitor 組件，並提供一個動態載入的方式來避免伺服器端渲染（SSR）問題。它允許開發者在 Next.js 應用中使用 DockerStatusMonitor 組件來監控 Docker 容器的狀態，並提供自動刷新和刷新間隔的選項。"
  },
  "components/DockerStatusMonitor.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "fetchContainerList",
        "description": "從 '/api/docker-containers' 獲取容器列表"
      },
      {
        "name": "handleAutoStartDevServer",
        "description": "向 '/api/docker-dev-server' 發送請求以自動啟動開發服務器"
      }
    ],
    "dockerTools": [
      "getSmartDockerStatusManager"
    ],
    "summary": "這個檔案是一個 React 組件，用於監控 Docker 容器的狀態。它使用智能狀態管理器來訂閱和更新容器的狀態變化，並提供手動刷新和自動啟動開發服務器的功能。該組件還能動態獲取容器列表，並根據容器名稱顯示不同的服務類型。主要用於在客戶端渲染環境中顯示 Docker 容器的運行狀態。"
  },
  "app/components/Project/PreviewPanel.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "getSmartDockerStatusManager",
        "description": "從 '@/lib/docker/smart-status-manager' 動態導入，用於獲取 Docker 容器狀態的智能管理器。"
      },
      {
        "name": "fetch('/api/docker-dev-server')",
        "description": "用於檢查和啟動 Docker 開發服務器的 API 調用。"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 React 組件 PreviewPanel，用於在不同設備和環境模式下預覽專案。它提供了設備預設配置（如桌面、平板、手機等）和環境模式（如開發、預覽、生產）的選擇功能。該組件還負責檢查和管理開發服務器的狀態，並使用 Docker 相關的 API 來獲取容器狀態和啟動開發服務器。當服務器運行時，它會顯示預覽的 iframe，並在啟動或檢查過程中記錄日誌。"
  },
  "app/components/Project/ProjectCard.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 React 組件 ProjectCard，用於顯示專案的基本資訊和狀態。它提供了專案名稱、描述、框架類型、容器狀態、TODO 進度等視覺化資訊，並允許用戶進行操作如進入專案、啟動或停止容器。這個組件主要用於在使用者介面中展示專案的概覽，並提供基本的容器管理功能。"
  },
  "app/components/Project/ProjectDashboard.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "endpoint": "/api/containers",
        "methods": [
          "GET",
          "POST"
        ],
        "description": "用於獲取專案列表和處理容器操作（如啟動容器）"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案是用於管理和顯示專案儀表板的 React 組件，主要功能包括顯示專案列表、創建新專案、過濾專案以及處理專案的容器操作（如啟動、停止、刪除和進入開發模式）。它使用了 Next.js 的導航功能和 React 的狀態管理來實現動態的用戶界面更新。檔案中還包含了一個用於創建新專案的模態框組件。"
  },
  "app/components/Project/ProjectFilters.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 React 元件 `ProjectFilters`，用於在使用者介面中提供專案篩選功能。它允許使用者根據搜尋字串、專案狀態（如運行中、已停止、錯誤）和框架類型（如 Next.js、React、Vue.js 等）來篩選專案。元件提供了多種互動功能，包括切換篩選條件、清除篩選、展開和收合進階篩選選項，以及創建新專案的按鈕。這個元件主要用於提升使用者在專案管理介面中的篩選和搜尋體驗。"
  },
  "app/components/Project/ProjectHeader.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個 React 組件 `ProjectHeader`，用於顯示專案的標題資訊。它包括專案名稱、描述、框架圖示、容器狀態等資訊，並提供操作按鈕來控制容器（如重啟、停止）和保存專案變更。該組件模擬從 API 獲取專案資料，並根據不同的專案 ID 顯示相應的資訊。它還包含一些 UI 元素來顯示 AI 連線狀態和工具就緒狀態。"
  },
  "app/components/Project/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是專案組件的統一導出點，主要功能是將多個專案相關的子組件（如 ProjectCard、ProjectDashboard 等）進行匯出，方便其他模組或檔案引用。這種設計有助於組織程式碼結構，提升可維護性和可讀性。"
  },
  "app/components/Todo/TodoList.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是 React 組件，用於顯示和管理待辦事項列表。它提供了篩選功能，允許用戶根據任務狀態（全部、待處理、已完成）和類別（如編程、測試等）來篩選待辦事項。每個待辦事項都有詳細的屬性，如優先級、創建時間和完成狀態。組件還提供了統計信息，如總任務數、已完成任務數和進度百分比。這個組件適合用於需要管理和顯示任務列表的應用中。"
  },
  "app/components/Todo/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於統一導出 Todo 組件中的 TodoList 模組。它的主要功能是簡化模組的導入過程，讓其他開發者可以更方便地使用 TodoList 組件。這是一個常見的模組導出模式，特別是在大型應用中，這樣的結構有助於維護和組織程式碼。"
  },
  "app/components/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於統一導出多個組件的 TypeScript 檔案。它將 'Chat'、'Project' 和 'Todo' 三個組件從各自的模組中導出，方便其他模組或檔案引用這些組件。這種做法有助於組織和管理應用程式的組件，使得代碼結構更加清晰和易於維護。"
  },
  "app/layout.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是 Next.js 應用程式的根佈局檔案，主要負責設定全域的 HTML 結構和字體樣式。它使用了 Next.js 的 Metadata 來設定網頁的標題和描述，並且導入了自定義的字體和全域的 CSS 樣式。這個檔案還包含了一個日誌過濾器的導入，用於隱藏 Docker API 請求的日誌。"
  },
  "app/globals.css": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是用於定義全域性的 CSS 樣式，主要使用 Tailwind CSS 進行樣式管理。它設置了基本的顏色和字體變數，並根據使用者的色彩偏好（淺色或深色模式）調整背景和前景顏色。此外，檔案還自定義了滾動條的樣式，以提供更一致的使用者介面體驗。這些樣式設定有助於在整個應用程式中保持一致的外觀和感覺。"
  },
  "app/page.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是 React 應用程式的主要頁面組件，負責渲染一個容器化開發環境管理平台的用戶介面。它包含了一個標題列和主要內容區域。標題列提供了平台名稱和一些全局操作按鈕，如新建專案和查看容器總覽。主要內容區域則包含 Docker 狀態監控面板和專案控制台，這些功能由 DockerStatusWrapper 和 ProjectDashboard 組件實現。"
  },
  "app/project/[id]/not-found.tsx": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是一個 React 元件，專門用於在 Next.js 應用中顯示 '找不到專案' 的錯誤頁面。當用戶嘗試訪問不存在或已刪除的專案時，這個頁面會顯示一個友好的錯誤訊息，並提供返回首頁的連結。頁面設計簡潔，使用了 Tailwind CSS 進行樣式設計，並且支援深色模式。"
  },
  "app/project/[id]/page.tsx": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "endpoint": "/api/containers",
        "method": "GET",
        "description": "用於獲取專案列表及其相關資訊。"
      },
      {
        "endpoint": "/api/docker",
        "method": "POST",
        "description": "用於檢查和啟動 Docker 容器的狀態。"
      }
    ],
    "dockerTools": [],
    "summary": "這個檔案是 Next.js 應用程式中的一個頁面組件，主要用於顯示特定專案的詳細資訊。它從 API 獲取專案資料，並檢查和啟動相關的 Docker 容器。頁面會根據專案的狀態顯示不同的內容，包括載入中、錯誤訊息或專案詳細資訊。此頁面還包含一個簡單的導航和狀態顯示功能。"
  },
  "lib/ai/enhanced-context-manager.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個增強的上下文管理器，專注於會話持久化和對話記憶。它管理會話上下文，包括對話歷史、專案狀態快照、重要記憶點和AI學到的專案知識。主要功能包括完整的會話持久化、智能對話歷史管理、專案狀態追蹤、向量化記憶搜尋以及上下文壓縮和清理。這些功能有助於在多個會話中保持一致的對話狀態和專案知識。"
  },
  "lib/ai/enhanced-prompts.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一個增強的 Prompt 系統，旨在提高大型語言模型（LLM）函數調用的準確性和一致性。它提供了一套完整的自動化規則和工具使用指南，確保用戶在描述需求時，系統能夠自動完成所有編程工作，而不需要用戶手動編寫程式碼。系統強調零程式碼體驗，並提供了多種工具的調用規範和錯誤恢復機制，以確保高效和精確的執行。這個檔案主要用於構建和管理自動化的 AI 程式設計助手。"
  },
  "lib/ai/enhanced-tool-schemas.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一套增強的工具 Schema 系統，旨在提高大型語言模型（LLM）函數調用的成功率和穩定性。檔案中包含多個工具的 Schema 定義，這些工具主要用於操作 Docker 容器內的檔案和目錄，包括讀取檔案、列出目錄內容等。每個工具都有詳細的參數定義、使用範例、常見錯誤及其解決方案，並且強調了參數名稱的正確使用。這些工具被分類為 Docker 操作和檔案操作類別，並提供了成功模式以便於檢測操作的成功與否。"
  },
  "lib/ai/langchain-chat-engine copy.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "createDockerToolkit",
      "createDefaultDockerContext",
      "DockerSecurityValidator"
    ],
    "summary": "這個檔案是 Langchain 聊天引擎的高品質重構版本，專注於上下文管理、工具調用自動化和智能決策。它提供了一個聊天系統，能夠創建和管理聊天會話，處理用戶訊息，並使用智能代理進行自動化決策。該模組已被棄用，建議使用新的 aiChatSession 工具。檔案中包含了多個接口定義和一個主要的 LangchainChatEngine 類，負責管理聊天會話的生命周期和處理邏輯。"
  },
  "lib/ai/langchain-dependencies.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案負責管理和配置 Langchain 的依賴，確保所有必要的 Langchain 套件都正確安裝和配置。它提供了所需的套件清單、推薦的版本配置、安裝指令和環境變數配置。此外，還包含檢查依賴是否已安裝的函數、Langchain 配置選項的介面、預設配置、配置驗證函數和配置創建函數。這些功能幫助開發者快速設置和驗證 Langchain 的運行環境。"
  },
  "lib/ai/stable-agent-executor.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個穩定的 Agent 執行器，主要用於整合增強的 Schema、Prompt 和錯誤恢復機制。它使用 langchain 庫來創建結構化的聊天代理，並提供工具的驗證和錯誤恢復功能。該執行器能夠處理用戶的請求，並自動執行相關工具來完成任務，支持繁體中文回應。它還包括錯誤恢復和重試機制，以提高執行的穩定性和可靠性。"
  },
  "lib/ai/unified-ai-agent-integration.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "容器管理",
      "檔案操作",
      "命令執行"
    ],
    "summary": "這個檔案是統一 AI Agent 整合器，旨在使用新的統一 Function Call 系統整合所有 AI Agent 功能。它替代了舊的 chat-agent-integration.ts 和 langchain-chat-engine.ts，提供統一的 AI Agent 體驗，支援 OpenAI Function Calling 和 Langchain 整合。主要功能包括創建和管理 AI Agent 會話、處理用戶訊息、選擇工具、記憶管理和智能決策。這個模組支援多種工具的調用，並能夠根據用戶需求動態選擇合適的工具來完成任務。"
  },
  "lib/functions/langchain-binder.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案主要負責將統一的 Function Call 系統與 Langchain 整合，通過將各種工具轉換為 Langchain 的 DynamicTool 格式。它提供了多種方法來轉換工具，包括批量轉換、按分類轉換以及為 OpenAI Function Calling 生成工具定義。此外，檔案中還包含智能工具選擇器，根據用戶的請求自動選擇相關工具。這些工具涉及多個領域，如 Docker、檔案系統、AI、專案管理等。"
  },
  "lib/core/diff-processor.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是一個用於處理代碼變更的工具，專門用於生成和應用 unified diff 格式的差異。它提供了多種方法來生成不同粒度的 diff（如行、單詞、字符級別），並能夠解析、套用、合併和反轉 diff。此外，它還提供了將 diff 轉換為 HTML 和 Markdown 格式的功能，以及驗證 diff 格式的正確性。這些功能對於版本控制系統或需要處理文本變更的應用程式非常有用。"
  },
  "lib/core/index.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是核心工具模組的統一導出點。它將多個模組（如 logger、diff-processor、tool-types 和 tool-manager）進行匯出，方便其他部分的程式碼進行引用和使用。這種設計有助於模組化管理和提高程式碼的可維護性。"
  },
  "lib/core/tool-manager.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個 AI 工具管理器，負責協調和管理多個 AI 工具的運作。它提供了一個統一的介面來註冊、移除和調用工具，並且支持事件驅動的通訊機制。該管理器還具備自動錯誤重試機制、工具使用統計追蹤和智能工具選擇建議等功能。開發者可以使用這個管理器來簡化 AI 工具的整合和管理，並提高系統的穩定性和效率。"
  },
  "lib/core/tool-types.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案定義了一系列與 AI 工具系統相關的 TypeScript 介面和類別，主要用於描述工具的回應格式、代碼差異應用、腳本執行、Git 檢查點管理、錯誤分析、Token 消耗追蹤等功能。這些介面和類別提供了統一的結構和方法，便於在不同工具之間進行數據交換和事件處理。"
  },
  "lib/docker/dynamic-project-tools.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [
      {
        "name": "getDockerContextById",
        "description": "根據容器 ID 獲取 Docker 上下文"
      },
      {
        "name": "getDockerContextByName",
        "description": "根據專案名稱獲取 Docker 上下文"
      },
      {
        "name": "createDefaultDockerContext",
        "description": "創建預設的 Docker 上下文"
      },
      {
        "name": "createDockerToolkit",
        "description": "創建 Docker 工具包"
      }
    ],
    "dockerTools": [
      "DockerToolkit",
      "DockerContext"
    ],
    "summary": "這個檔案主要負責動態管理專案名稱和配置 Docker 工具。它從不同來源（如 URL、專案 ID、專案名稱、容器 ID）動態獲取專案資訊，並根據這些資訊配置對應的 Docker 工具包。這樣的設計允許開發者在不同的上下文中靈活地管理和操作 Docker 容器，特別是在需要動態解析和配置專案的情境下。"
  },
  "lib/docker/index-legacy.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "DockerToolkit",
      "DockerDevServerTool",
      "DockerLogMonitorTool",
      "DockerHealthCheckTool",
      "DockerFileSystemTool",
      "DockerAIEditorManager",
      "DOCKER_TOOL_REGISTRY",
      "DOCKER_AI_FUNCTION_SCHEMAS"
    ],
    "summary": "此檔案作為 Docker AI 工具的統一入口，提供了一系列工具和管理功能，確保所有操作都在 Docker 容器內執行。它匯出了一些核心工具類、管理器、工具註冊表和函數架構定義，並提供了快速開始的範例，展示如何創建 Docker 工具實例、執行基本工具和獲取工具清單。檔案強調了安全性和隔離性，確保操作不影響宿主機，並提供智能修復和完整監控功能。"
  },
  "lib/docker/smart-port-manager.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案實現了一個智能端口管理器，主要功能是自動檢測和解決端口衝突，提供最佳的用戶體驗。它可以分配可用端口、終止佔用端口的進程、檢查多個端口的狀態、自動修復開發伺服器端口衝突，以及清理殭屍進程和端口。這些功能對於需要動態管理網絡端口的應用程序特別有用。"
  },
  "lib/functions/usage-examples.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案提供了一些使用範例，展示如何使用統一的 Function Call 系統來創建和管理 AI Agent 的工具集。主要功能包括創建高優先級工具集、根據用戶請求選擇工具、生成 OpenAI 工具定義、搜尋特定工具以及執行特定工具。這些功能有助於開發者在 AI 應用中更有效地管理和使用工具。"
  },
  "lib/index.ts": {
    "hasDockerIntegration": true,
    "dockerApis": [],
    "dockerTools": [
      "createDockerToolkit"
    ],
    "summary": "這個檔案是 TypeScript 的模組導出檔案，主要負責從不同的子模組中匯出功能，以便其他部分的程式碼可以使用這些功能。它包括了 AI 模組、Docker 模組和核心功能模組的導出。此外，檔案中還包含了一個新的統一 Function Call 系統的導出，以及一些保持向後兼容的導出，這些導出已被標記為棄用。這樣的設計有助於模組化管理和功能的重用。"
  },
  "lib/silent-logger.js": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是一個靜默日誌過濾器，用於攔截和過濾 Node.js 應用程式中的標準輸出流和錯誤輸出流。主要目的是過濾掉 Next.js 應用中與 Docker API 相關的請求日誌，避免這些日誌出現在終端或日誌文件中。這樣可以減少不必要的日誌輸出，讓開發者更專注於其他重要的日誌訊息。"
  },
  "middleware.ts": {
    "hasDockerIntegration": false,
    "dockerApis": [],
    "dockerTools": [],
    "summary": "這個檔案是一個中介軟體（middleware）模組，用於處理 Next.js 應用中的特定 API 請求。主要功能是攔截 '/api/docker-status' 路徑的請求，並在響應中添加自定義標頭 'x-silent-request'，以標記這些請求為靜默請求，避免日誌輸出。這樣的設計可能用於減少不必要的日誌噪音，特別是在處理與 Docker 狀態相關的 API 請求時。"
  }
}